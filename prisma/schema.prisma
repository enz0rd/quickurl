// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  email            String        @unique
  password         String
  stripeCustomerId String?       @unique
  urls             ShortUrl[]
  subscriptions    Subscription?
  twoFAEnabled     Boolean       @default(false)
  twoFASecret      String?       @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  ResetPasswordToken ResetPasswordToken[]
  dataAnalytics      DataAnalytics[]

  ChangeEmailToken ChangeEmailToken[]

  Reset2FAToken Reset2FAToken[]

  ShortUrlGroups ShortUrlGroups[]

  ApiKeys ApiKeys[]
}

model ApiKeys {
  id         String    @id @default(cuid())
  key        String    @unique
  name       String
  userId     String
  user       User      @relation(fields: [userId], references: [id])
  createdAt  DateTime  @default(now())
  lastUsedAt DateTime?
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  rateLimit  Int?
}

model ShortUrl {
  id           String          @id @default(cuid())
  slug         String?         @unique
  originalUrl  String
  uses         Int             @default(0)
  timesUsed    Int             @default(0)
  expDate      DateTime?       @default(dbgenerated("NOW() + INTERVAL '5 days'"))
  isMalicious  Boolean         @default(false)
  isURLChecked Boolean         @default(false)
  urlCheckedAt DateTime?
  password     String?
  userId       String?
  user         User?           @relation(fields: [userId], references: [id])
  groupId      String?
  group        ShortUrlGroups? @relation(fields: [groupId], references: [id])
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  dataAnalytics DataAnalytics[]
}

model Subscription {
  id                   String   @id @default(cuid())
  userId               String   @unique
  user                 User     @relation(fields: [userId], references: [id])
  stripeSubscriptionId String   @unique
  stripePriceId        String
  currentPeriodEnd     DateTime
  status               String // e.g., 'active', 'canceled', 'past_due'
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model ResetPasswordToken {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  resetToken String   @unique
  expDate    DateTime @default(dbgenerated("NOW() + INTERVAL '15 minutes'"))
  createdAt  DateTime @default(now())
}

model Reset2FAToken {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  resetToken String   @unique
  expDate    DateTime @default(dbgenerated("NOW() + INTERVAL '15 minutes'"))
  createdAt  DateTime @default(now())
}

model ChangeEmailToken {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  changeToken String   @unique
  expDate     DateTime @default(dbgenerated("NOW() + INTERVAL '1 day'"))
  createdAt   DateTime @default(now())
}

model DataAnalytics {
  id         String   @id @default(cuid())
  shortUrlId String
  shortUrl   ShortUrl @relation(fields: [shortUrlId], references: [id])
  ownerId    String
  user       User     @relation(fields: [ownerId], references: [id])
  country    String
  city       String
  browser    String
  os         String
  device     String
  accessedAt DateTime @default(now())
}

model ShortUrlGroups {
  id          String   @id @default(cuid())
  name        String
  description String?
  ownerId     String
  shortName   String?
  user        User     @relation(fields: [ownerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ShortUrl ShortUrl[]
}

// model Groups_Urls {
//   id         String         @id @default(cuid())
//   groupId    String
//   shortUrlId String
//   group      ShortUrlGroups @relation(fields: [groupId], references: [id])
//   shortUrl   ShortUrl       @relation(fields: [shortUrlId], references: [id])
// }
